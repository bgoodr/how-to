#!/bin/bash
# -*-mode: Shell-script; indent-tabs-mode: nil; sh-basic-offset: 2 -*-
#
# Python condaenv preamble script -- Install conda, env, and packages and run a .py script
#
# User-customizable variables (set them in the environment; see their defaults later on):
#
#  PYTHON_CONDAENV_PREAMBLE_CONDA_HEAD_DIR -- Directory above where the miniconda[23] directory
#    will be installed.
#
#  PYTHON_CONDAENV_PREAMBLE_CONDA_PYTHON_VERSION -- Identifies Python major version number to
#    use in the condaenv.
#
#  PYTHON_CONDAENV_PREAMBLE_REQUIRED_PACKAGES -- Space-separated list of tuples
#    of the form "import_statement|installer|package_name|channel" that indicate
#    what packages to install and which installer (pip, conda, etc.) to
#    use. channel is specific to the conda install command (the -c option) that is
#    needed for some packages, e.g:
#
#  PYTHON_CONDAENV_PREAMBLE_INSTALL -- When set to 1, idempotently
#    install the condaenv and the packages listed in the
#    PYTHON_CONDAENV_PREAMBLE_REQUIRED_PACKAGES variable. When set to
#    install-only, just install.
#
#  PYTHON_CONDAENV_PREAMBLE_VERBOSE -- When set to 1, show the
#    installation output as it occurs. Otherwise, be silent about the
#    installation unless an error occurs.
#
# Example 1:
#
#    #!/bin/bash
#    export PYTHON_CONDAENV_PREAMBLE_REQUIRED_PACKAGES="import%20matplotlib|conda|matplotlib"
#    # Only install conda, the env, and packages within the env, when
#    # PYTHON_CONDAENV_PREAMBLE_INSTALL is set to 1. By default, leave it
#    # unset to avoid 4 seconds of checking logic each time we invoke the
#    # script.:
#    #
#    #  export PYTHON_CONDAENV_PREAMBLE_INSTALL=1
#    # 
#    exec "$(dirname $0)/python_condaenv_preamble" "$0" "$@"
#
# Only when PYTHON_CONDAENV_PREAMBLE_INSTALL is set to 1, the above
# idempotently ensures that the packages specified by
# PYTHON_CONDAENV_PREAMBLE_REQUIRED_PACKAGES are in the conda environment (by
# installing them into that environment as needed), and then invokes
# the .py script that depends upon those packages.
#
# The first string before the "|" can be constructed as a url-encoded
# Python statement to import the package:
#
#     $ python
#     Python 2.7.12 (default, Jul  1 2016, 15:12:24) 
#     [GCC 5.4.0 20160609] on linux2
#     Type "help", "copyright", "credits" or "license" for more information.
#     >>> import urllib
#     >>> urllib.quote("from selenium import webdriver")
#     'from%20selenium%20import%20webdriver'
#     >>> urllib.unquote(urllib.quote("from selenium import webdriver"))
#     'from selenium import webdriver'
#
# This was done because some modules require complicated import
# statements (e.g., the selenium module above is a good example of
# that).
#
# Example 2:
#
# Using a channel:
#
#    #!/bin/bash
#    # -*-mode: Shell-script; indent-tabs-mode: nil; sh-basic-offset: 2 -*-
#    #
#    # Only install conda, the env, and packages within the env, when
#    # PYTHON_CONDAENV_PREAMBLE_INSTALL is set to 1. By default, leave it
#    # unset to avoid 4 seconds of checking logic each time we invoke the
#    # script:
#    #
#    #  export PYTHON_CONDAENV_PREAMBLE_INSTALL=1
#    # 
#    export PYTHON_CONDAENV_PREAMBLE_REQUIRED_PACKAGES="from%20apiclient.discovery%20import%20build|conda|google-api-python-client|conda-forge"
#    . $(dirname $0)/../../bgoodr/how-to/python/python_condaenv_preamble/python_condaenv_preamble "$0" "$@"
#

# ================================================================================
# Instead of having all wrapper scripts do the following:
#
#   # Generic forwarding stub for all .py scripts:
#   exec "$(dirname $0)/python_condaenv_preamble" "$0" "$@"
#
# have those wrapper scripts just source this script directly. This
# allows us to maintain a central copy of the preamble, while
# having different wrapper scripts and their corresponding .py files
# located in various subdirectories:
# ================================================================================

log=""
set_log ()
{
  log="$1"
  if [ "$PYTHON_CONDAENV_PREAMBLE_VERBOSE" != 1 ]
  then
    exec &> $log
  fi
}

cat_log () {
  if [ "$PYTHON_CONDAENV_PREAMBLE_VERBOSE" != 1 ]
  then
    cat "$log"
  fi
}

#
# Install the root conda environment if it does not already exist:
#
#   Each of these variables are overridable by the user, or the
#   script, to relocate the condaenv:
#

PYTHON_CONDAENV_PREAMBLE_CONDA_HEAD_DIR=${PYTHON_CONDAENV_PREAMBLE_CONDA_HEAD_DIR:-$HOME/conda}
PYTHON_CONDAENV_PREAMBLE_CONDA_PYTHON_VERSION=${PYTHON_CONDAENV_PREAMBLE_CONDA_PYTHON_VERSION:-2}
# Arrange the miniconda installation directory to be release-specific just in case there is variation between releases as is typical:
CONDA_INSTALL_DIR=$PYTHON_CONDAENV_PREAMBLE_CONDA_HEAD_DIR/$(lsb_release -si).$(lsb_release -sr).miniconda$PYTHON_CONDAENV_PREAMBLE_CONDA_PYTHON_VERSION
if [ ! -d $CONDA_INSTALL_DIR ]
then
  if [ -z "$PYTHON_CONDAENV_PREAMBLE_INSTALL" ]
  then
    echo "ERROR: CONDA_INSTALL_DIR \"$CONDA_INSTALL_DIR\" does not exist as a directory. Set PYTHON_CONDAENV_PREAMBLE_INSTALL=1 and reinvoke to install it."
    exit 1
  fi

  if ! mkdir -p $PYTHON_CONDAENV_PREAMBLE_CONDA_HEAD_DIR
  then
    echo "ERROR: Cannot create $PYTHON_CONDAENV_PREAMBLE_CONDA_HEAD_DIR a directory."
    exit 1
  fi
  # This name of installer may need to be fiddled with for Mac but this works for Linux:
  installer=Miniconda${PYTHON_CONDAENV_PREAMBLE_CONDA_PYTHON_VERSION}-latest-$(uname -s)-$(uname -m).sh
  ( # Scope for set_log
    set_log $PYTHON_CONDAENV_PREAMBLE_CONDA_HEAD_DIR/$installer.log
    set -x -e
    cd $PYTHON_CONDAENV_PREAMBLE_CONDA_HEAD_DIR
    wget https://repo.continuum.io/miniconda/$installer
    bash ./$installer -b -p $CONDA_INSTALL_DIR
  )
  if [ $? != 0 ]
  then
    cat_log
    echo
    echo "ERROR: Failed to install root conda environment. See above output for errors."
    exit 1
  fi
fi

# Define the default condaenv:
#
#   Users can override the name of the environment by setting PYTHON_CONDAENV_PREAMBLE_CONDA_ENV
#   in the environment before execution
#
PYTHON_CONDAENV_PREAMBLE_CONDA_ENV=${PYTHON_CONDAENV_PREAMBLE_CONDA_ENV:-env1}

#
# Optimization: Only do the env existence check if
# PYTHON_CONDAENV_PREAMBLE_INSTALL is set:
#
if [ -n "$PYTHON_CONDAENV_PREAMBLE_INSTALL" ]
then
  (
    # Get the new conda executable into the PATH, but only temparily, hence the outer () scope:
    #
    #   We simply CANNOT insert $CONDA_INSTALL_DIR/bin into the PATH at all in
    #   the outer scope because if we did, and the user uses pip, then the pip
    #   in the $CONDA_INSTALL_DIR/bin directory will be picked up and NOT the
    #   pip that is under the conda-env where the python lives. If that
    #   happens, then it messes the installation up in very weird ways.
    #
    export PATH=$CONDA_INSTALL_DIR/bin:$PATH

    #
    # Build the environment given by PYTHON_CONDAENV_PREAMBLE_CONDA_ENV:
    #
    #   The goal here is to just clone the root environment. Individual
    #   preamble scripts can install whatever packages they need
    #   dynamically via the PYTHON_CONDAENV_PREAMBLE_REQUIRED_PACKAGES environment
    #   variable.
    #
    env_existence=$(conda info --envs | grep "^$PYTHON_CONDAENV_PREAMBLE_CONDA_ENV ")
    if [ -z "$env_existence" ]
    then
      ( # Scope for set_log
        set_log $PYTHON_CONDAENV_PREAMBLE_CONDA_HEAD_DIR/conda_create_env.$PYTHON_CONDAENV_PREAMBLE_CONDA_ENV.log
        set -x -e
        cd $CONDA_INSTALL_DIR
        conda create --name $PYTHON_CONDAENV_PREAMBLE_CONDA_ENV --clone root
      )
      if [ $? != 0 ]
      then
        cat_log
        echo
        echo "ERROR: Failed to create condaenv: $PYTHON_CONDAENV_PREAMBLE_CONDA_ENV"
        exit 1
      fi
    fi
  )
fi

#
# Activate the condaenv:
#
source $CONDA_INSTALL_DIR/bin/activate $PYTHON_CONDAENV_PREAMBLE_CONDA_ENV
if [ $? != 0 ]
then
  echo "ERROR: Could not activate condaenv $PYTHON_CONDAENV_PREAMBLE_CONDA_ENV"
  exit 1
fi

#
# Allow executing a subshell that has conda in the PATH:
#
if [ "$PYTHON_CONDAENV_PREAMBLE_INSTALL" = "with-conda" ]
then
  export PATH=$CONDA_INSTALL_DIR/bin:$PATH
  $SHELL "$@"
  exit $?
fi
   
#
# Optimization: Only do the package installation if
# PYTHON_CONDAENV_PREAMBLE_INSTALL is set:
#
if [ -n "$PYTHON_CONDAENV_PREAMBLE_INSTALL" ]
then
  #
  # Detect and install required packages into that condaenv:
  #
  for package_tuple in $PYTHON_CONDAENV_PREAMBLE_REQUIRED_PACKAGES
  do
    #
    # Split on vertical bar:
    #
    unset import_package_statement installer package channel
    eval $(echo "$package_tuple" | awk -F\| '{ printf ("import_package_statement=\"%s\"; installer=\"%s\"; package=\"%s\"; channel=\"%s\"\n", $1, $2, $3, $4); }')
    if [ -z "$import_package_statement" -o -z "$installer" -o -z "$package" ]
    then
      echo "ERROR: PYTHON_CONDAENV_PREAMBLE_REQUIRED_PACKAGES should be of the form \"import_package_statement1|installer1|package1 import_package_statement2|installer2|package2 ...\""
      exit 1
    fi

    exec_statement="import urllib; script = urllib.unquote(\"$import_package_statement\"); exec(script)"
    if python -c "$exec_statement" &> /dev/null
    then
      :
    else
      ( # Scope for set_log
        set_log $PYTHON_CONDAENV_PREAMBLE_CONDA_HEAD_DIR/install_package.$PYTHON_CONDAENV_PREAMBLE_CONDA_ENV.log.$$
        if [ $installer = "pip" ]
        then

          # Always upgrade pip on the fly prior to using pip to upgrade the $package:
          pip install --upgrade pip

          # Upgrade the package (which includes installing if it has not yet been installed):
          pip install --upgrade $package
        elif [ $installer = "conda" ]
        then
          package_existence=$(conda list -n $PYTHON_CONDAENV_PREAMBLE_CONDA_ENV -f $package | grep -v '^#')
          if [ -z "$package_existence" ]
          then
            # Specify the channel when $channel is set:
            channel_args=""
            if [ -n "$channel" ]
            then
              channel_args="-c $channel"
            fi

            # Install the package:
            conda install -y $channel_args -n $PYTHON_CONDAENV_PREAMBLE_CONDA_ENV $package
          else
            conda update -y -n $PYTHON_CONDAENV_PREAMBLE_CONDA_ENV $package
          fi
        else
          echo "ERROR: Invalid installer: \"$installer\""
          exit 1
        fi
      )
      if [ $? != 0 ]
      then
        cat_log
        echo
        echo "ERROR: Install of package $package failed. See above."
        exit 1
      fi

      if python -c "$exec_statement"
      then
        :
      else
        echo "$exec_statement"
        cat_log
        echo
        echo "ERROR: Install of package $package failed. See above."
        exit 1
      fi
    fi
  done
fi

#
# Allow for just setting up and not execution
#
if [ "$PYTHON_CONDAENV_PREAMBLE_INSTALL" != "install-only" ]
then
  #
  # Invoke the script:
  #
  caller=$1
  shift

  #
  # We desire NOT to set PYTHONPATH here. We desire to let the .py file
  # resolve paths to the modules it depends upon. E.g., do NOT do this:
  #
  #    export PYTHONPATH="$(dirname $caller)/python:${PYTHONPATH}"
  #

  # Allow pdb execution by using PYTHON_PREAMBLE_EXTRA_ARGS here (which
  # is empty/not-set by default):
  exec /usr/bin/env python -u ${PYTHON_PREAMBLE_EXTRA_ARGS} "${caller}.py" "$@"
fi
